* Call signature:
  - go-cart <input file>
    
* bh3nh3 started at 14:31 13 May 2020
  - going to crash because of third output file not divisible by 3
    
* water fourths on eland in 10 minutes!!!
* 2h6m on maple lol
  
* TODO need to handle error in output, tighter convergence will require this
  - already seen it with jax's

* TODO might need to change energy line now that energy= is in input

* TODO test cccr

* TODO make sure new panic feature doesnt break anything

* TODO update progress correctly if resuming from checkpoint

* TODO figure out why Jax's first run didn't work
  - many jobs crashed at once and then nothing would budge
  - maybe check age of the output file and resubmit if too long since written to
  - 6/8 update crashed again and locked him out; added panic option to output file
  
* TODO input file with
** DONE geometry
** DONE number of concurrent jobs
** DONE when to write checkpoints
** DONE molpro job information
   - method
   - basis set
   - charge
   - spin
** TODO mopac job information - untested, waiting on eland
   - method
   - charge
** follow Psi4 input style
   - not doing this for now
    
* TODO add mopac i/o - waiting on eland
** DONE read inputs:
*** DONE equilibrium geometry - same as molpro, xyz file
*** DONE parameters
    - just link to params file - params.dat hard coded
** TODO write input files - need to test
** TODO read output files

* TODO general refactoring
** TODO switch cases to nested ifs
   - partially done
   - hopefully a better solution than this still
** TODO make TotalJobs an actual calculation, not a stupid loop
** TODO get back to testing everything

* TODO investigate alternate calculation schemes to minimize floating point error
  - Library/Floats.pdf

* DONE checkpoint system - resume from incomplete run
  - tested at least from the last written checkpoint at all dlevels
  - Probably a better solution than maintaining 3 of basically the same array but alas
** DONE dump checkpoint info
** DONE read in checkpoint info and resume


* DONE take command line flags
  - c continue from checkpoint
  - o to overwrite inp
  - h for help

* DONE figure out slurm submission to get maximum number of jobs running at once

* DONE try on +benzene+ on eland
** DONE FIGURE OUT WHY IT SUBMITS SO MANY DUPLICATE JOBS
   - something wrong with sbatch or my interface with it
   - add tests
** DONE add slurm i/o
*** DONE add switch between pbs and slurm submission
    - some kind of interface? 
* DONE big problems if jobs take more than a minute in my select statement
  - Fleshed this out substantially but continue monitoring
  - might be fixed by change to only resubmit if the file isn't found or parsing fails
  - added variable to adjust this but no way to set externally yet
  - tried taking out timeout but it froze indefinitely
  - printing showed it was timing out constantly

* Stack of jobs that can be added to and popped from concurrently
  - instead of just building smaller job lists as I am doing now

* Should first derivatives in thirds be zero?

* Should probably be using the same seed for the hashnames, look into this
  - right now just hoping they arent randomly the same?
  
* Advice from irc
  <dominikh> anyway, NumGoroutine isn't really a useful metric for avoiding
  hitting the limit. I'd just have a semaphore (easiest implemented
  as a buffered channel). acquire before spawning a goroutine,
  release when a goroutine returns, and hope things work out
    
* if I need more signals just use combinations of them
  - two signals gives 900 unique combos compared to 30 of one

* zero values below some threshold - hold off for now, see later 

* DONE find where the time is going - guesses below
  - sleeps in submit -> count how many times this usually happens
    - might want to go to increasing sleep to have initial ones shorter
  - timeout in queueandwait -> could be too long or too short
    - too long if jobs are clearly failed before that
    - too short if they haven't failed or finished yet

* DONE check for already calculated 2nd derivatives in 4ths
  - pass around 2DE
  - build array of second derivatives - use this for fourths and duplicate seconds
    - duplicate if sorted indices already in 2DE

* DONE move force constant calculation into goroutine
  - have to pass fc arrays as argument
    
* DONE reevaluate job struct and job list -> maybe a stack of jobs
  - might get rid of job struct altogether, submit jobs as they are built?
  - pop job off to submit it?
    

* DONE Delete files after reading
  - this is back to not working since it was making too many syscalls
  - try keeping garbage list and tacking some on to every pbs job
    - hopefully deletes on compute node, saving me resources on head
    
* DONE GET RID OF DUPLICATES 1,2,1 = 2,1,1 = 112
  - done in thirds and fourths
  - tried fixing with i <= j <= k but didnt work so reverted
  - think more

* DONE likely problem with math in third derivatives/wrong ordering
  - I think emphasis on wrong ordering will reveal the math but maybe other way around
    
* DONE fix counting, probably have to use a global variable or something

* DONE option for different derivative levels
** DONE test this

* DONE THOROUGHLY RETHINK RETRIES -> I've been calling it twice if it fails to read
** Removed
  - no I havent, the qsubmit one was local and that's the only one causing trouble
  - probably just forget about it, everything should work eventually <- trying this now

* DONE figure out how higher order derivatives are written in output
  - tentatively done

* DONE experiment with no thread locking
  - I think it should help to hold a thread for reading/submitting which can run into resouce problems
    - otherwise when I sleep to wait for resources, something else will use the resources
  - but this might not be right
  - if anything take it off reading, probably more necessary for submit
      
* Maple benchmarking data for second derivatives 
  - all locks, 9 workers was fastest
  - 11 workers with read locks is fastest now
  - Working hypothesis:
    - Read locks speed it up - not sleeping while thread locked
    - Submit locks slow it down - sleeping while thread locked
    - Optimal workers is in the range [9,11]
  - differences of 28e-10 in many results throughout testing, sometimes twice that
|------------+--------+------------+-----------+------------+--------------|
|            |        | Both Locks | No Locks  | Read Locks | Submit Locks |
|------------+--------+------------+-----------+------------+--------------|
| Trial      | Repeat | Time       | Time      | Time       | Time         |
|------------+--------+------------+-----------+------------+--------------|
| 16 workers |      1 | 11m13.796s |           |            |              |
|            |      2 | 12m53.310s |           |            |              |
|            |      3 | crash      |           |            |              |
|------------+--------+------------+-----------+------------+--------------|
| 12 workers |      1 | 4m23.100s  | 8m15.264s | 4m38.532s  | 11m44.230s   |
|            |      2 | 6m18.229s  | 7m2.754s  | 4m16.705s  | 5m52.712s    |
|            |      3 | 5m14.072s  | 6m9.490s  | 8m25.406s  | 5m2.215s     |
|------------+--------+------------+-----------+------------+--------------|
| 11 workers |      1 | 4m52.667s  | 4m56.138s | 4m1.981s   | 4m46.356s    |
|            |      2 | 5m38.494s  | 5m34.129s | 3m54.353s  | 6m48.663s    |
|            |      3 | 6m22.455s  | 4m33.178s | 4m48.952s  | 5m41.851s    |
|------------+--------+------------+-----------+------------+--------------|
| 10 workers |      1 | 4m26.072s  | 6m19.906s | 5m9.203s   | 5m47.458s    |
|            |      2 | 4m28.380s  | 5m24.394s | 5m13.700s  | 5m11.124s    |
|            |      3 | 6m28.970s  | 4m23.665s | 4m22.972s  | 5m29.700s    |
|------------+--------+------------+-----------+------------+--------------|
| 9 workers  |      1 | 4m45.994s  | 5m27.572s | 4m35.968s  | 5m40.977s    |
|            |      2 | 4m41.724s  | 4m57.922s | 4m34.347s  | 5m38.867s    |
|            |      3 | 4m40.645s  | 6m57.403s | 4m40.101s  | 5m39.927s    |
|------------+--------+------------+-----------+------------+--------------|
| 8 workers  |      1 | 5m7.947s   | 5m15.907s | 5m20.310s  | 6m35.837s    |
|            |      2 | 5m7.585s   | 5m14.423s | 5m23.689s  | 6m9.979s     |
|            |      3 | 5m7.317s   | 5m2.927s  | 5m30.961s  | 6m11.103s    |
|------------+--------+------------+-----------+------------+--------------|
| 4 workers  |      1 | 9m39.824s  |           |            |              |
|            |      2 | 9m44.195s  |           |            |              |
|            |      3 | 9m34.168s  |           |            |              |
|------------+--------+------------+-----------+------------+--------------|

* Eland benchmarking data for second derivatives 
|------------+---------+-----------+------------+---------+------|
|            | c16b5da |           |            | ee74dc9 |      |
|------------+---------+-----------+------------+---------+------|
| Trial      |  Repeat | Time      | Trial      |  Repeat | Time |
|------------+---------+-----------+------------+---------+------|
| 30 workers |       1 | 8m41.723s | 30 workers |       1 |      |
|            |       2 | 8m44.205s |            |       2 |      |
|            |       3 | 8m39.478s |            |       3 |      |
|------------+---------+-----------+------------+---------+------|
| 15 workers |       1 | 8m39.735s | 15 workers |       1 |      |
|            |       2 | 8m39.322s |            |       2 |      |
|            |       3 | 8m39.294s |            |       3 |      |
|------------+---------+-----------+------------+---------+------|
| 12 workers |       1 | 8m45.323s | 12 workers |       1 |      |
|            |       2 |           |            |       2 |      |
|            |       3 |           |            |       3 |      |
|------------+---------+-----------+------------+---------+------|
| 8 workers  |       1 | 8m45.836s | 8 workers  |       1 |      |
|            |       2 | 8m46.518s |            |       2 |      |
|            |       3 | 8m46.453s |            |       3 |      |
|------------+---------+-----------+------------+---------+------|
| 9 workers  |       1 |           | 9 workers  |       1 |      |
|            |       2 |           |            |       2 |      |
|            |       3 |           |            |       3 |      |
|------------+---------+-----------+------------+---------+------|
| 8 workers  |       1 |           | 8 workers  |       1 |      |
|            |       2 |           |            |       2 |      |
|            |       3 |           |            |       3 |      |
|------------+---------+-----------+------------+---------+------|
| 4 workers  |       1 |           | 4 workers  |       1 |      |
|            |       2 |           |            |       2 |      |
|            |       3 |           |            |       3 |      |
|------------+---------+-----------+------------+---------+------|

* Maple benchmarking data for second derivatives c16b5da
|------------+--------+------------|
| Trial      | Repeat | Time       |
|------------+--------+------------|
| 9 workers  |      1 | 20m35.556s |
|            |      2 | 22m22.926s |
|            |      3 |            |
|------------+--------+------------|
| 15 workers |      1 |            |
|            |      2 |            |
|            |      3 |            |
|------------+--------+------------|
| 11 workers |      1 |            |
|            |      2 |            |
|            |      3 |            |
|------------+--------+------------|
| 10 workers |      1 |            |
|            |      2 |            |
|            |      3 |            |
|------------+--------+------------|
| 9 workers  |      1 |            |
|            |      2 |            |
|            |      3 |            |
|------------+--------+------------|
| 8 workers  |      1 |            |
|            |      2 |            |
|            |      3 |            |
|------------+--------+------------|
| 4 workers  |      1 |            |
|            |      2 |            |
|            |      3 |            |
|------------+--------+------------|
